#!/bin/bash

# PARAM_FILE=$1 #required. takes a path name
# MODEL_FILE=$2 #required. takes a path name
# ARRAY_FILE=$3 #optional. takes a path name
# REC_MAP=$4 #optional. takes a path name
# JOB_NUM=$5 #required. takes an integer

set -euox pipefail

# make sure we are in the correct dir
if [ ! -e sites.xml.template ]; then
    echo "Please only run this script from within the workflow directory"
    exit 1
fi

PARAM_FILE=""
MODEL_FILE=""
JOB_NUM=0
REC_MAP=""
ARRAY_FILE=""
OPTIND=1
while getopts ':p:m:a:g:j:' opt; do
  case "$opt" in
    p) PARAM_FILE="$OPTARG" ;;
    m) MODEL_FILE="$OPTARG"   ;;
    a) ARRAY_FILE="$OPTARG" ;;
    g) REC_MAP="$OPTARG" ;;
    j) JOB_NUM="$OPTARG" ;;
    \?)
      echo "Invalid option: -$OPTARG"
      exit 1
      ;;
  esac
done


if [ -z "$PARAM_FILE" ]; then
  echo "Please specify parameter file, model file, number of jobs. array template and recombination map are optional."
  echo "Example: ./submit -p param_file.txt -m model_file.csv -a ill_650.bed -r genetic_map.macshs -j 1000"
  exit 1
fi
if [ -z "$MODEL_FILE" ]; then
  echo "Please specify parameter file, model file, number of jobs. array template and recombination map are optional."
  echo "Example: ./submit -p param_file.txt -m model_file.csv -a ill_650.bed -r genetic_map.macshs -j 1000"
  exit 1
fi
if [ "$JOB_NUM" -eq 0 ]; then
  echo "Please specify parameter file, model file, number of jobs. array template and recombination map are optional."
  echo "Example: ./submit -p param_file.txt -m model_file.csv -a ill_650.bed -r genetic_map.macshs -j 1000"
  exit 1
  # exit if $JOB_NUM not an integer
fi


module load pegasus
module load stashcp

TOP_DIR="$(pwd)"

export RUN_ID=simprily_"$(date +'%s')"

export RUN_DIR="/local-scratch/$USER/workflows/$RUN_ID"
mkdir -p "$RUN_DIR"

echo "$PARAM_FILE"
echo "$MODEL_FILE"

cp "$PARAM_FILE" "$RUN_DIR"/
cp "$MODEL_FILE" "$RUN_DIR"/


if [ -n "$ARRAY_FILE" ]; then
  echo "$ARRAY_FILE"
  cp "$ARRAY_FILE" "$RUN_DIR"/
fi

if [ -n "$REC_MAP" ]; then
  echo "$REC_MAP"
  cp "$REC_MAP" "$RUN_DIR"/
fi

# generate the site catalog
SC="$RUN_DIR"/sites.xml
envsubst <sites.xml.template >"$SC"


# generate the dax
export PYTHONPATH="$(pegasus-config --python)"
if [ -n "$REC_MAP" -a -n "$ARRAY_FILE" ]; then
  echo 1
  ./tools/dax-generator "$RUN_ID" "$RUN_DIR" "$JOB_NUM" "$(basename "$PARAM_FILE")" "$(basename "$MODEL_FILE")" "$(basename "$ARRAY_FILE")" "$(basename "$REC_MAP")"
elif [ -n "$REC_MAP" -a -z "$ARRAY_FILE" ]; then
  echo 2
  ./tools/dax-generator "$RUN_ID" "$RUN_DIR" "$JOB_NUM" "$(basename "$PARAM_FILE")" "$(basename "$MODEL_FILE")" "" "$(basename "$REC_MAP")"
elif [ -z "$REC_MAP" -a -n "$ARRAY_FILE" ]; then
  echo 3
  ./tools/dax-generator "$RUN_ID" "$RUN_DIR" "$JOB_NUM" "$(basename "$PARAM_FILE")" "$(basename "$MODEL_FILE")" "$(basename "$ARRAY_FILE")" ""
else
  echo 4
  ./tools/dax-generator "$RUN_ID" "$RUN_DIR" "$JOB_NUM" "$(basename "$PARAM_FILE")" "$(basename "$MODEL_FILE")" "" ""
fi
mv dax.xml "$RUN_DIR"/

echo
echo "An outputs directory will be created within the base of the workflow directory."
echo "Directory: $RUN_DIR/outputs"

# plan and submit the  workflow
echo
pegasus-plan \
    -Dpegasus.catalog.site.file="$SC" \
    --conf pegasus.conf \
    --relative-dir "$RUN_ID" \
    --sites condorpool \
    --output-site local \
    --cleanup leaf \
    --dir "$RUN_DIR"/workflow \
    --dax "$RUN_DIR"/dax.xml \
    --submit
