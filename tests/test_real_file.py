import unittest

from alleles_generator.real_file import AllelesReal

class TestRealFile(unittest.TestCase):
    def test_basic(self):
        alleles_real_file = AllelesReal('tests/test_data/head.tped')
        alleles = alleles_real_file.make_lists()
        self.maxDiff = None
        expected_alleles = [['1', '1', '0', '1', '0', '1', '0', '1', '1', '1'],
         ['1', '1', '1', '1', '1', '1', '1', '1', '0', '1'],
         ['1', '1', '1', '1', '1', '1', '0', '1', '0', '1'],
         ['1', '1', '1', '1', '1', '1', '1', '1', '1', '1'],
         ['1', '1', '0', '1', '0', '1', '1', '1', '0', '1'],
         ['1', '1', '0', '0', '0', '1', '1', '1', '0', '1'],
         ['1', '1', '0', '1', '0', '1', '1', '1', '0', '1'],
         ['1', '1', '1', '1', '0', '1', '1', '1', '1', '1'],
         ['1', '1', '1', '1', '0', '1', '1', '1', '1', '1'],
         ['0', '1', '1', '1', '1', '1', '0', '1', '1', '1'],
         ['0', '1', '1', '1', '1', '1', '0', '1', '1', '1'],
         ['1', '1', '1', '1', '1', '1', '1', '1', '0', '1'],
         ['1', '1', '1', '1', '1', '1', '1', '1', '0', '1'],
         ['1', '1', '1', '1', '1', '1', '1', '1', '0', '1'],
         ['1', '1', '1', '1', '1', '1', '1', '1', '1', '1'],
         ['1', '1', '1', '1', '0', '1', '1', '1', '1', '1'],
         ['1', '1', '1', '1', '1', '1', '1', '1', '1', '1'],
         ['1', '1', '0', '1', '0', '0', '1', '1', '1', '1'],
         ['1', '1', '0', '1', '1', '1', '0', '1', '0', '0'],
         ['1', '1', '1', '1', '1', '1', '1', '1', '1', '1'],
         ['1', '1', '1', '1', '1', '1', '1', '1', '1', '1'],
         ['1', '1', '1', '1', '1', '1', '1', '1', '1', '1'],
         ['0', '0', '0', '1', '1', '1', '0', '1', '0', '0'],
         ['1', '1', '0', '1', '0', '0', '0', '1', '1', '1'],
         ['1', '1', '1', '1', '1', '1', '0', '1', '0', '1'],
         ['0', '1', '1', '1', '0', '1', '0', '1', '1', '1'],
         ['0', '1', '0', '1', '1', '1', '0', '1', '0', '1'],
         ['1', '1', '1', '1', '0', '1', '1', '1', '0', '1'],
         ['0', '1', '0', '1', '0', '1', '0', '1', '1', '1'],
         ['0', '1', '0', '0', '1', '1', '0', '0', '1', '1'],
         ['0', '1', '0', '0', '1', '1', '0', '1', '1', '1'],
         ['0', '1', '0', '0', '1', '1', '0', '1', '1', '1'],
         ['0', '1', '1', '1', '0', '1', '1', '1', '1', '1'],
         ['1', '1', '1', '1', '1', '1', '0', '1', '1', '1'],
         ['0', '0', '1', '1', '0', '0', '1', '1', '0', '1'],
         ['1', '1', '0', '0', '1', '1', '1', '1', '0', '1'],
         ['1', '1', '0', '0', '1', '1', '1', '1', '0', '1'],
         ['1', '1', '0', '0', '1', '1', '1', '1', '0', '1']]
        #self.assertEqual(alleles, expected_alleles)

    def test_seq_bitarray(self):
        seq_real_file = AllelesReal('tests/test_data/head_Behar_HGDP_FtDNA_Jews_MidEast_chr1.tped')
        seqA_bits = seq_real_file.make_bitarray_seq(0, 10)
        seqB_bits = seq_real_file.make_bitarray_seq(10, 20)
        self.maxDiff = None

if __name__ == '__main__':
    unittest.main()
